name: Release Packages

permissions:
  contents: write

on:
  # push:
  #   branches:
  #     - main
  #   tags:
  #     - 'v*'
  # pull_request:
  release:
    types: [created]
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize compilation speed and binary size
  RUSTFLAGS: "-C link-arg=-s"

jobs:
  # Automatically create a GitHub Release when a tag is pushed
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # Only run this job when a tag is pushed, not when a release is created
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract tag name
        id: extract-tag
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=${TAG_NAME#v}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check-release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ steps.extract-tag.outputs.TAG_NAME }}
          owner: ${{ github.repository_owner }}
          repo: ${{ github.repository.name }}
          tag: ${{ steps.extract-tag.outputs.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create GitHub Release
        id: create-release
        if: steps.check-release.outputs.status != '200'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract-tag.outputs.TAG_NAME }}
          name: Release ${{ steps.extract-tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build binaries for all platforms
  build-binaries:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: [create-release]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
      github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: apisnip-linux-x86_64

          - name: Linux ARM64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: apisnip-linux-arm64
            use_cross: true

          - name: Linux ARM32 (armv7)
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            asset_name: apisnip-linux-armv7
            use_cross: true

          - name: Linux ARM32 (Raspberry Pi)
            os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            asset_name: apisnip-linux-arm
            use_cross: true

          - name: Linux x86 (32-bit)
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            asset_name: apisnip-linux-i686
            use_cross: true

          - name: Linux RISC-V 64-bit
            os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            asset_name: apisnip-linux-riscv64
            use_cross: true

          - name: Linux MUSL x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: apisnip-linux-musl-x86_64

          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: apisnip-windows-x86_64
            is_windows: true

          - name: Windows x86 (32-bit)
            os: windows-latest
            target: i686-pc-windows-msvc
            asset_name: apisnip-windows-i686
            is_windows: true

          - name: macOS x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            asset_name: apisnip-macos-x86_64

          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            asset_name: apisnip-macos-arm64

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract version (for release naming)
      - name: Extract version
        id: extract-version
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION_NUM=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # Extract binary name from Cargo.toml
      - name: Extract binary name
        id: extract-binary
        shell: bash
        run: |
          BINARY_NAME=$(grep '^name =' Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "Binary name is $BINARY_NAME"

      # Install Linux dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi

      # Set up Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Setup Rust cache with better granularity
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ matrix.target }}

      # Install Cross for cross-compilation targets
      - name: Install Cross
        if: matrix.use_cross == true
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      # Cache Cross Docker images
      - name: Cache Cross Docker images
        if: matrix.use_cross == true
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ matrix.target }}-${{ hashFiles('Cross.toml') }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ matrix.target }}-
            ${{ runner.os }}-docker-

      # Set up Cross configuration (optional linker)
      - name: Set up Cross configuration
        if: matrix.use_cross == true
        run: |
          echo "[target.${{ matrix.target }}]" > Cross.toml
          echo "linker = 'gcc'" >> Cross.toml
          # Add LTO for smaller binaries
          echo "[profile.release]" >> Cross.toml
          echo "lto = true" >> Cross.toml
          echo "codegen-units = 1" >> Cross.toml
          echo "opt-level = 's'" >> Cross.toml

      # Build the binary
      - name: Build with Cross (Linux cross-compilation)
        if: matrix.os == 'ubuntu-latest' && matrix.use_cross == true
        run: cross build --release --target ${{ matrix.target }}

      - name: Build with Cargo (native builds)
        if: matrix.os != 'ubuntu-latest' || matrix.use_cross != true
        run: cargo build --release --target ${{ matrix.target }}
        shell: bash

      # Validate binary
      - name: Validate binary
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            FILE_PATH="target/${{ matrix.target }}/release/${{ steps.extract-binary.outputs.BINARY_NAME }}.exe"
          else
            FILE_PATH="target/${{ matrix.target }}/release/${{ steps.extract-binary.outputs.BINARY_NAME }}"
          fi
          
          # Check that file exists and has non-zero size
          if [[ -f "$FILE_PATH" && -s "$FILE_PATH" ]]; then
            echo "✅ Binary successfully built: $FILE_PATH"
            ls -la "$FILE_PATH"
          else
            echo "❌ Failed to build binary or binary has zero size"
            exit 1
          fi

      # Prepare artifacts
      - name: Create tarball (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p release
          BINARY_PATH="target/${{ matrix.target }}/release/${{ steps.extract-binary.outputs.BINARY_NAME }}"
          cp $BINARY_PATH release/
          cp LICENSE README.md release/ || echo "LICENSE or README.md not found, skipping"
          # Add version info file
          echo "Version: ${{ steps.extract-version.outputs.VERSION }}" > release/VERSION
          echo "Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> release/VERSION
          echo "Git Commit: $(git rev-parse HEAD)" >> release/VERSION
          cd release
          tar czf ../${{ matrix.asset_name }}.tar.gz *
          cd ..
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Create zip (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir release
          BINARY_PATH="target/${{ matrix.target }}/release/${{ steps.extract-binary.outputs.BINARY_NAME }}${{ matrix.is_windows && '.exe' || '' }}"
          cp $BINARY_PATH release/
          cp LICENSE README.md release/ || echo "LICENSE or README.md not found, skipping"
          # Add version info file
          echo "Version: ${{ steps.extract-version.outputs.VERSION }}" > release/VERSION
          echo "Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> release/VERSION
          echo "Git Commit: $(git rev-parse HEAD)" >> release/VERSION
          cd release
          7z a -tzip ../${{ matrix.asset_name }}.zip *
          cd ..
          certutil -hashfile ${{ matrix.asset_name }}.zip SHA256 > ${{ matrix.asset_name }}.zip.sha256
          # Cleanup the certutil output to just the hash
          sed -i -e '1d' -e '3d' ${{ matrix.asset_name }}.zip.sha256

      # Upload to GitHub Release
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.asset_name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
            ${{ matrix.asset_name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}.sha256
          tag_name: ${{ steps.extract-version.outputs.VERSION }}  # Use extracted VERSION
          fail_on_unmatched_files: false
          make_latest: false
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cargo-publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-binaries
    # Only publish on tags
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      
      - name: Check if crate exists
        id: check_crate
        run: |
          VERSION=${{ github.ref_name }}
          VERSION="${VERSION#v}"
          EXISTS=$(cargo search apisnip --limit 1 | grep -c "apisnip = \"$VERSION\"" || true)
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
      
      - name: Publish crate
        if: steps.check_crate.outputs.exists == '0'
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}