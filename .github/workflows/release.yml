name: Release Packages
on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  # Prepare icons for all platforms
  prepare-icons:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
      - name: Convert icons for all platforms
        run: |
          chmod +x resources/icons/*.sh
          ./resources/icons/convert_all.sh || echo "Icon conversion failed but continuing"
          
      - name: Upload converted icons
        uses: actions/upload-artifact@v4
        with:
          name: prepared-icons
          path: resources/icons
          retention-days: 1

  # Release with GoReleaser
  goreleaser:
    needs: [prepare-icons]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Download prepared icons
      - name: Download icons
        uses: actions/download-artifact@v4
        with:
          name: prepared-icons
          path: resources/icons
      
      # Create SVG icon for Linux
      - name: Create SVG icon
        run: |
          cp resources/icons/png/apisnip.png resources/icons/linux/
          mkdir -p resources/icons/linux/scalable
          convert resources/icons/png/apisnip.png resources/icons/linux/apisnip.svg
        
      # Install Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      # Install cross-compilation targets
      - name: Install targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
      
      # Install dependencies for building packages
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y libc6-dev-i386
          # For packaging
          sudo apt-get install -y ruby ruby-dev rpm build-essential
          sudo gem install fpm
      
      # Install UPX for binary compression
      - name: Install UPX
        run: sudo apt-get install -y upx
      
      # Cache dependencies
      - uses: Swatinem/rust-cache@v2
      
      # Run GoReleaser
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 