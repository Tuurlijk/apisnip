name: Release Packages

on:
  release:
    types: [ created ]

permissions:
  contents: write


jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact-name: linux-x86_64
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            artifact-name: linux-aarch64
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            artifact-name: windows-x86_64
            os: windows-latest
            binary-suffix: .exe
          - target: x86_64-apple-darwin
            artifact-name: macos-x86_64
            os: macos-latest
          - target: aarch64-apple-darwin
            artifact-name: macos-aarch64
            os: macos-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install cross-rs for non-macOS/Windows targets
      - name: Install cross
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cross --locked
          cross --version

      # Set up macOS environment (if needed)
      - name: Set up macOS environment
        if: matrix.os == 'macos-latest'
        run: |
          xcode-select --install || true
          sudo xcodebuild -license accept || true
          clang --version

      # Cache dependencies
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      # Build the binary
      - name: Build (Linux with cross)
        if: matrix.os == 'ubuntu-latest'
        run: cross build --release --target ${{ matrix.target }}

      - name: Build (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --target ${{ matrix.target }}
        shell: bash

      # Prepare artifact
      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          BINARY_NAME=$(grep '^name =' Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')
          SUFFIX="${{ matrix.binary-suffix }}"
          mv target/${{ matrix.target }}/release/$BINARY_NAME$SUFFIX artifacts/$BINARY_NAME-${{ matrix.artifact-name }}$SUFFIX

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/

      # Optionally publish to GitHub Release
      - name: Upload to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}