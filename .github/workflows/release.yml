name: Release Packages
on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  # Release with GoReleaser
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      # Install Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      # Install cross-compilation targets
      - name: Install targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
      
      # Install dependencies for building packages
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          # For ARM64 cross-compilation
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y binutils-aarch64-linux-gnu 
          sudo apt-get install -y libc6-dev-arm64-cross
          # For i686 cross-compilation
          sudo apt-get install -y libc6-dev-i386
          # For Windows cross-compilation
          sudo apt-get install -y gcc-mingw-w64
          # For packaging
          sudo apt-get install -y ruby ruby-dev rpm build-essential
          sudo gem install fpm
          
      # Install macOS SDK for cross-compilation
      - name: Install macOS SDK
        run: |
          # Install dependencies
          sudo apt-get install -y cmake clang libssl-dev libxml2-dev zlib1g-dev
          
          # Create directory for SDK
          mkdir -p /tmp/osxcross
          cd /tmp/osxcross
          
          # Get macOS SDK and osxcross
          wget -q https://github.com/tpoechtrager/osxcross/archive/refs/heads/master.zip
          unzip -q master.zip
          cd osxcross-master
          
          # Get Xcode SDK (using 10.13 which works well with Rust)
          wget -q https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.15.sdk.tar.xz -O tarballs/MacOSX10.15.sdk.tar.xz
          
          # Build and install - with slightly reduced output to avoid log spam
          PORTABLE=true SDK_VERSION=10.15 OSX_VERSION_MIN=10.13 ./build.sh > /dev/null
          
          # Add to path (needed for GoReleaser and Rust)
          echo "/tmp/osxcross/osxcross-master/target/bin" >> $GITHUB_PATH
      
      # Install UPX for binary compression
      - name: Install UPX
        run: sudo apt-get install -y upx
      
      # Cache dependencies
      - uses: Swatinem/rust-cache@v2
      
      # Set up cross-compilation environment variables
      - name: Set up cross-compilation environment
        run: |
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUSTFLAGS=-C link-arg=-lgcc' >> $GITHUB_ENV
          # Fix for ring crate when cross-compiling to macOS
          echo 'CARGO_TARGET_X86_64_APPLE_DARWIN_RUSTFLAGS=-C link-arg=-undefined -C link-arg=dynamic_lookup' >> $GITHUB_ENV
          echo 'CARGO_TARGET_AARCH64_APPLE_DARWIN_RUSTFLAGS=-C link-arg=-undefined -C link-arg=dynamic_lookup' >> $GITHUB_ENV
          # Disable ring's default features and use less problematic ones
          echo 'CARGO_FEATURE_LESS_SAFE_GETRANDOM_CUSTOM_IMPLEMENTATION=1' >> $GITHUB_ENV
          echo 'CARGO_FEATURE_PREFILL_CACHE_IN_THREAD=1' >> $GITHUB_ENV
          # Disable debug assertions for ring
          echo 'RING_CORE_PREFIX=/usr/local' >> $GITHUB_ENV
          echo 'DEBUG=0' >> $GITHUB_ENV
      
      # Run GoReleaser
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 