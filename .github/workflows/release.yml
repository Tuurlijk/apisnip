name: Release Packages
on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  # Build for Linux (x86_64, aarch64, i686) and Windows (x86_64, i686)
  build-linux-win:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install Linux/Windows targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          rustup target add x86_64-pc-windows-gnu
          rustup target add i686-pc-windows-gnu

      - name: Install Linux/Windows build dependencies
        run: |
          sudo apt-get update
          # Only install UPX now, cross handles toolchains
          sudo apt-get install -y --no-install-recommends upx

      - uses: Swatinem/rust-cache@v2

      - name: Install cross-rs tool
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build Linux/Windows binaries with cross
        run: |
          targets=(
            "x86_64-unknown-linux-gnu"
            "aarch64-unknown-linux-gnu"
            "i686-unknown-linux-gnu"
            "x86_64-pc-windows-gnu"
            "i686-pc-windows-gnu"
          )
          project_name="apisnip"
          mkdir -p dist # Ensure dist exists

          for target in "${targets[@]}"; do
            echo "Building $project_name for $target using cross..."
            cross build --release --target "$target"
            
            # Determine binary name and path
            if [[ "$target" == *windows* ]]; then
              binary_name="${project_name}.exe"
              src_path="target/$target/release/$binary_name"
            else
              binary_name="$project_name"
              src_path="target/$target/release/$binary_name"
            fi
            
            # Create GoReleaser dist structure and copy
            dest_dir="dist/linux-win_${target}"
            mkdir -p "$dest_dir"
            cp "$src_path" "$dest_dir/$binary_name"
            echo "Copied $binary_name to $dest_dir"
            
            # Run UPX
            echo "Running UPX on $dest_dir/$binary_name..."
            upx --best --lzma "$dest_dir/$binary_name" || echo "UPX failed for $target, continuing..."
          done

      - name: List dist directory contents # For debugging
        run: ls -R dist

      - name: Upload Linux/Windows dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-win
          path: dist/

  # Build for macOS (x86_64, aarch64)
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install macOS targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install macOS build dependencies
        run: brew install upx

      - uses: Swatinem/rust-cache@v2

      - name: Build macOS binaries with GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: build --snapshot --clean --skip=validate --id=macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-macos
          path: dist/

  # Create GitHub Release using artifacts from build jobs
  release:
    runs-on: ubuntu-latest # Can run on ubuntu as it only packages/publishes
    needs: [build-linux-win, build-macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Linux/Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-win
          path: dist/

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-macos
          path: dist/

      # Ensure GoReleaser can run post-build hooks like UPX if needed during packaging
      - name: Install UPX
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends upx

      # Install packaging deps for NFPM (deb/rpm)
      - name: Install NFPM dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends rpm ruby ruby-dev build-essential && sudo gem install fpm --no-document

      - name: List merged dist directory # For debugging
        run: ls -R dist

      - name: Run GoReleaser to package and publish
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 