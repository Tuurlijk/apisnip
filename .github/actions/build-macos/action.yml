name: 'Build macOS Packages'
description: 'Build DMG and tarball packages for macOS platforms'
inputs:
  target:
    required: true
    description: 'Rust target triple'
  platform:
    required: true
    description: 'Platform identifier'
    
runs:
  using: "composite"
  steps:
    - name: Install tools
      shell: bash
      run: |
        brew install create-dmg imagemagick

    - name: Prepare icons
      shell: bash
      run: |
        # Ensure directory exists
        mkdir -p resources/icons/macos
        
        # Create a placeholder icon if it doesn't exist
        if [ ! -f resources/icons/macos/apisnip.icns ]; then
          echo "Creating placeholder ICNS"
          mkdir -p temp_iconset
          # Create a simple icon with text
          convert -size 1024x1024 xc:transparent -font Arial -pointsize 512 -gravity center -fill black -draw "text 0,0 '✂️'" temp_iconset/icon_512x512@2x.png || true
          for size in 16 32 64 128 256 512; do
            convert temp_iconset/icon_512x512@2x.png -resize ${size}x${size} temp_iconset/icon_${size}x${size}.png || true
            if [ $size -lt 512 ]; then
              convert temp_iconset/icon_512x512@2x.png -resize $((size*2))x$((size*2)) temp_iconset/icon_${size}x${size}@2x.png || true
            fi
          done
          
          if [[ "$OSTYPE" == "darwin"* ]]; then
            iconutil -c icns temp_iconset -o resources/icons/macos/apisnip.icns || touch resources/icons/macos/apisnip.icns
          else
            # On Linux, just create an empty file
            touch resources/icons/macos/apisnip.icns
          fi
          rm -rf temp_iconset
        fi
        
        # Run the icon conversion script
        ./resources/icons/convert_for_macos.sh || true

    - name: Build binary
      shell: bash
      run: |
        mkdir -p artifacts
        cargo build --release --target ${{ inputs.target }}

    - name: Create app structure
      shell: bash
      run: |
        VERSION=$(grep -m 1 "version" Cargo.toml | cut -d '"' -f 2)
        
        # Create application bundle structure
        mkdir -p Apisnip.app/Contents/{MacOS,Resources}
        cp target/${{ inputs.target }}/release/apisnip Apisnip.app/Contents/MacOS/
        chmod +x Apisnip.app/Contents/MacOS/apisnip
        
        # Create a placeholder icon if it doesn't exist
        if [ ! -f resources/icons/macos/apisnip.icns ]; then
          touch resources/icons/macos/apisnip.icns
        fi
          
        # Copy the icon to Resources
        cp resources/icons/macos/apisnip.icns Apisnip.app/Contents/Resources/ || touch Apisnip.app/Contents/Resources/apisnip.icns
        
        # Create PkgInfo
        echo "APPL????" > Apisnip.app/Contents/PkgInfo
        
        # Create Info.plist with proper indentation
        cat > Apisnip.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>apisnip</string>
          <key>CFBundleIdentifier</key>
          <string>com.tuurlijk.apisnip</string>
          <key>CFBundleName</key>
          <string>Apisnip</string>
          <key>CFBundleVersion</key>
          <string>${VERSION}</string>
          <key>CFBundleShortVersionString</key>
          <string>${VERSION}</string>
          <key>CFBundleInfoDictionaryVersion</key>
          <string>6.0</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>LSMinimumSystemVersion</key>
          <string>10.13</string>
          <key>CFBundleIconFile</key>
          <string>apisnip.icns</string>
        </dict>
        </plist>
        EOF
        
        # Fix the indentation in the created file
        sed -i 's/^        //g' Apisnip.app/Contents/Info.plist
        
        # Fix the VERSION variable which won't be expanded due to the single quotes
        sed -i "s/\${VERSION}/$VERSION/g" Apisnip.app/Contents/Info.plist
        
    - name: Create DMG
      shell: bash
      run: |
        VERSION=$(grep -m 1 "version" Cargo.toml | cut -d '"' -f 2)
        
        # Create DMG with scissors icon
        create-dmg \
          --volname "Apisnip" \
          --background "white" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "Apisnip.app" 150 150 \
          --app-drop-link 450 150 \
          --no-internet-enable \
          "artifacts/apisnip-$VERSION-${{ inputs.platform }}.dmg" \
          "Apisnip.app" || true
        
        # The create-dmg command sometimes exits with a non-zero code even when successful
        # Check if the DMG was actually created
        if [[ -f "artifacts/apisnip-$VERSION-${{ inputs.platform }}.dmg" ]]; then
          echo "DMG successfully created"
        else
          echo "DMG creation failed, creating a simple tarball instead"
          mkdir -p artifacts
          tar -czf "artifacts/apisnip-$VERSION-${{ inputs.platform }}.tar.gz" -C target/${{ inputs.target }}/release apisnip
        fi
          
        # Always create a tarball
        tar -czf artifacts/apisnip-$VERSION-${{ inputs.platform }}.tar.gz -C target/${{ inputs.target }}/release apisnip 