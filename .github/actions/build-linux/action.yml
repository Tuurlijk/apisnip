name: 'Build Linux Packages'
description: 'Build DEB, RPM, and tarball packages for Linux platforms'
inputs:
  target:
    required: true
    description: 'Rust target triple'
  platform:
    required: true
    description: 'Platform identifier'
    
runs:
  using: "composite"
  steps:
    - name: Install cross-compilation tools
      shell: bash
      run: |
        sudo apt-get update
        
        # Install appropriate cross-compilers based on target
        if [[ "${{ inputs.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        elif [[ "${{ inputs.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf
        elif [[ "${{ inputs.target }}" == "arm-unknown-linux-gnueabihf" ]]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf
        elif [[ "${{ inputs.target }}" == "i686-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-i686-linux-gnu
        elif [[ "${{ inputs.target }}" == "riscv64gc-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-riscv64-linux-gnu
        elif [[ "${{ inputs.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt-get install -y musl-tools
        fi
        
        # Install cross for cross-compilation
        cargo install cross
        
        # Install ImageMagick for icon conversions
        sudo apt-get install -y imagemagick

    - name: Prepare icons
      shell: bash
      run: |
        # Run the icon conversion script
        ./resources/icons/convert_for_linux.sh || echo "Icon conversion failed but continuing"

    - name: Build binary
      shell: bash
      run: |
        mkdir -p artifacts
        
        # Use cross for cross-compilation targets
        if [[ "${{ inputs.target }}" == "x86_64-unknown-linux-gnu" ]]; then
          # Use native cargo for x86_64 builds
          cargo build --release --target ${{ inputs.target }}
        else
          # Use cross for all other targets
          cross build --release --target ${{ inputs.target }}
        fi
      
    - name: Set up packaging tools
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rpm build-essential
        sudo gem install fpm

    - name: Create packages with fpm
      shell: bash
      run: |
        VERSION=$(grep -m 1 "version" Cargo.toml | cut -d '"' -f 2)
        ARCH=$(echo "${{ inputs.target }}" | cut -d'-' -f1)
        
        # Handle architecture naming for packaging
        case "$ARCH" in
          "aarch64") PKG_ARCH="arm64" ;;
          "armv7") PKG_ARCH="armhf" ;;
          "arm") PKG_ARCH="armel" ;;
          "x86_64") PKG_ARCH="amd64" ;;
          "i686") PKG_ARCH="i386" ;;
          "riscv64gc") PKG_ARCH="riscv64" ;;
          *) PKG_ARCH="$ARCH" ;;
        esac
        
        # Map for RPM architecture naming
        case "$PKG_ARCH" in
          "amd64") RPM_ARCH="x86_64" ;;
          "arm64") RPM_ARCH="aarch64" ;;
          "armhf") RPM_ARCH="armv7hl" ;;
          "armel") RPM_ARCH="armv6hl" ;;
          "i386") RPM_ARCH="i686" ;;
          *) RPM_ARCH="$PKG_ARCH" ;;
        esac

        # Create icons directory structure for packages
        mkdir -p icons-deb/usr/share/icons/hicolor
        
        # Copy icons to the right locations
        for size in 16 32 48 64 128 256; do
          mkdir -p icons-deb/usr/share/icons/hicolor/${size}x${size}/apps
          cp resources/icons/linux/${size}x${size}/apisnip.png icons-deb/usr/share/icons/hicolor/${size}x${size}/apps/ || true
        done
        
        # Copy SVG icon
        mkdir -p icons-deb/usr/share/icons/hicolor/scalable/apps
        cp resources/icons/linux/apisnip.svg icons-deb/usr/share/icons/hicolor/scalable/apps/ || true

        # Create DEB package
        fpm -s dir -t deb -n apisnip -v $VERSION \
          --architecture $PKG_ARCH \
          --description "A terminal user interface tool for trimming OpenAPI specifications down to size." \
          --url "https://github.com/Tuurlijk/apisnip" \
          --license "MIT" \
          --maintainer "Tuurlijk" \
          --deb-no-default-config-files \
          target/${{ inputs.target }}/release/apisnip=/usr/bin/apisnip \
          icons-deb/usr/share/icons/hicolor=/usr/share/icons/hicolor
        
        mv *.deb artifacts/apisnip-$VERSION-${{ inputs.platform }}.deb

        # Create RPM package
        fpm -s dir -t rpm -n apisnip -v $VERSION \
          --architecture $RPM_ARCH \
          --description "A terminal user interface tool for trimming OpenAPI specifications down to size." \
          --url "https://github.com/Tuurlijk/apisnip" \
          --license "MIT" \
          --maintainer "Tuurlijk" \
          target/${{ inputs.target }}/release/apisnip=/usr/bin/apisnip \
          icons-deb/usr/share/icons/hicolor=/usr/share/icons/hicolor
        
        mv *.rpm artifacts/apisnip-$VERSION-${{ inputs.platform }}.rpm

        # Create AppImage only for x86_64 Linux
        if [[ "${{ inputs.target }}" == "x86_64-unknown-linux-gnu" ]]; then
          mkdir -p AppDir/usr/{bin,share/applications,share/icons/hicolor}
          cp target/${{ inputs.target }}/release/apisnip AppDir/usr/bin/
          chmod +x AppDir/usr/bin/apisnip
          
          # Copy icons to AppDir
          cp -r icons-deb/usr/share/icons/hicolor AppDir/usr/share/icons/
          
          # Create .desktop file with proper indentation for heredoc
          cat > AppDir/usr/share/applications/apisnip.desktop << 'EOF'
          [Desktop Entry]
          Name=ApiSnip
          Exec=apisnip
          Icon=apisnip
          Type=Application
          Categories=Development;
          EOF
          
          # Fix the indentation in the created file
          sed -i 's/^          //g' AppDir/usr/share/applications/apisnip.desktop
          
          # Install appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          
          # Create AppImage
          ./appimagetool AppDir artifacts/apisnip-$VERSION-${{ inputs.platform }}.AppImage || true
        fi
        
        # Clean up
        rm -rf icons-deb
        
        # Always create a tarball
        tar -czf artifacts/apisnip-$VERSION-${{ inputs.platform }}.tar.gz -C target/${{ inputs.target }}/release apisnip 