name: 'Build Windows Packages'
description: 'Build MSI and ZIP packages for Windows platforms'
inputs:
  target:
    required: true
    description: 'Rust target triple'
  platform:
    required: true
    description: 'Platform identifier'
    
runs:
  using: "composite"
  steps:
    - name: Install WiX toolset and ImageMagick
      shell: powershell
      run: |
        # Install Wix Toolset
        choco install wixtoolset -y
        # Install cargo-wix for creating MSI installers
        cargo install cargo-wix
        # Install ImageMagick for icon conversion
        choco install imagemagick -y

    - name: Prepare icons
      shell: bash
      run: |
        # Ensure directory exists
        mkdir -p resources/icons/windows
        
        # Create a placeholder icon if it doesn't exist
        if [ ! -f resources/icons/windows/apisnip.ico ]; then
          echo "Creating placeholder icon"
          convert -size 256x256 xc:transparent -font Arial -pointsize 72 -gravity center -fill black -draw "text 0,0 '✂️'" resources/icons/windows/apisnip.ico || true
        fi
        
        # Run the icon conversion script for Windows
        ./resources/icons/convert_for_windows.sh || true

    - name: Build binary
      shell: bash
      run: |
        mkdir -p artifacts
        cargo build --release --target ${{ inputs.target }}

    - name: Create MSI package
      shell: powershell
      run: |
        # Extract version from Cargo.toml
        $version = (Select-String -Path Cargo.toml -Pattern 'version = "(.*)"').Matches.Groups[1].Value
        
        # Determine platform architecture for WiX
        $wixPlatform = "x64"
        if ("${{ inputs.target }}" -notmatch "x86_64") {
          $wixPlatform = "x86"
        }
        
        # Ensure icon exists, create a dummy one if it doesn't
        if (-not (Test-Path "resources\icons\windows\apisnip.ico")) {
          Write-Output "Creating dummy icon"
          New-Item -ItemType Directory -Path "resources\icons\windows" -Force | Out-Null
          $iconBytes = [byte[]]@(0,0,1,0,1,0,16,16,0,0,1,0,32,0,104,4,0,0,22,0,0,0)
          [System.IO.File]::WriteAllBytes("$PWD\resources\icons\windows\apisnip.ico", $iconBytes)
        }
        
        # Create WiX configuration if it doesn't exist
        if (-not (Test-Path "wix\main.wxs")) {
          # Create the wix directory
          New-Item -ItemType Directory -Path "wix" -Force | Out-Null
          
          # Create the WiX template file line by line to avoid YAML validation issues
          $wxsFilePath = "wix\main.wxs"
          
          # Write header
          '<?xml version="1.0" encoding="windows-1252"?>' > $wxsFilePath
          '<!--' >> $wxsFilePath
          '  Please do not remove these pre-processor If-Else blocks. These are used with the' >> $wxsFilePath
          '  WiX Toolset to appropriately set the installation directory depending on whether' >> $wxsFilePath
          '  we're doing a 32-bit or 64-bit build.' >> $wxsFilePath
          '-->' >> $wxsFilePath
          '<?if $(var.Platform) = x64 ?>' >> $wxsFilePath
          '    <?define PlatformProgramFilesFolder = "ProgramFiles64Folder" ?>' >> $wxsFilePath
          '<?else ?>' >> $wxsFilePath
          '    <?define PlatformProgramFilesFolder = "ProgramFilesFolder" ?>' >> $wxsFilePath
          '<?endif ?>' >> $wxsFilePath
          '<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">' >> $wxsFilePath
          '    <Product ' >> $wxsFilePath
          '        Id="*"' >> $wxsFilePath
          '        Name="ApiSnip"' >> $wxsFilePath
          '        UpgradeCode="12345678-1234-1234-1234-123456789ABC"' >> $wxsFilePath
          '        Manufacturer="Tuurlijk"' >> $wxsFilePath
          '        Language="1033"' >> $wxsFilePath
          '        Codepage="1252"' >> $wxsFilePath
          '        Version="$(var.Version)">' >> $wxsFilePath
          '' >> $wxsFilePath
          '        <Package Id="*"' >> $wxsFilePath
          '            Keywords="Installer"' >> $wxsFilePath
          '            Description="API Specification Trimming Tool"' >> $wxsFilePath
          '            Manufacturer="Tuurlijk"' >> $wxsFilePath
          '            InstallerVersion="100"' >> $wxsFilePath
          '            Languages="1033"' >> $wxsFilePath
          '            Compressed="yes"' >> $wxsFilePath
          '            SummaryCodepage="1252"' >> $wxsFilePath
          '            InstallScope="perMachine" />' >> $wxsFilePath
          '            ' >> $wxsFilePath
          '        <MajorUpgrade ' >> $wxsFilePath
          '            AllowSameVersionUpgrades="yes"' >> $wxsFilePath
          '            DowngradeErrorMessage="A newer version of [ProductName] is already installed. Setup will now exit." />' >> $wxsFilePath
          '            ' >> $wxsFilePath
          '        <Media Id="1" Cabinet="apisnip.cab" EmbedCab="yes" />' >> $wxsFilePath
          '        <Icon Id="ProductIcon" SourceFile="resources\icons\windows\apisnip.ico" />' >> $wxsFilePath
          '        <Property Id="ARPPRODUCTICON" Value="ProductIcon" />' >> $wxsFilePath
          '        <Property Id="ARPHELPLINK" Value="https://github.com/Tuurlijk/apisnip" />' >> $wxsFilePath
          '        ' >> $wxsFilePath
          
          # Add platform-specific target path
          $targetPath = "target\${{ inputs.target }}\release\apisnip.exe"
          
          # Continue writing the file
          '        <Directory Id="TARGETDIR" Name="SourceDir">' >> $wxsFilePath
          '            <Directory Id="$(var.PlatformProgramFilesFolder)">' >> $wxsFilePath
          '                <Directory Id="INSTALLDIR" Name="ApiSnip">' >> $wxsFilePath
          '                    <Component Id="MainExecutable" Guid="*">' >> $wxsFilePath
          "                        <File Id='ApiSnipEXE' Name='apisnip.exe' DiskId='1' Source='$targetPath' KeyPath='yes' />" >> $wxsFilePath
          '                    </Component>' >> $wxsFilePath
          '                </Directory>' >> $wxsFilePath
          '            </Directory>' >> $wxsFilePath
          '            ' >> $wxsFilePath
          '            <Directory Id="ProgramMenuFolder">' >> $wxsFilePath
          '                <Directory Id="ApplicationProgramsFolder" Name="ApiSnip">' >> $wxsFilePath
          '                    <Component Id="ApplicationShortcut" Guid="*">' >> $wxsFilePath
          '                        <Shortcut ' >> $wxsFilePath
          '                            Id="ApplicationStartMenuShortcut" ' >> $wxsFilePath
          '                            Name="ApiSnip" ' >> $wxsFilePath
          '                            Description="API Specification Trimming Tool"' >> $wxsFilePath
          '                            Target="[INSTALLDIR]apisnip.exe"' >> $wxsFilePath
          '                            WorkingDirectory="INSTALLDIR"' >> $wxsFilePath
          '                            Icon="ProductIcon" />' >> $wxsFilePath
          '                        <RemoveFolder ' >> $wxsFilePath
          '                            Id="CleanUpShortCut" ' >> $wxsFilePath
          '                            Directory="ApplicationProgramsFolder" ' >> $wxsFilePath
          '                            On="uninstall" />' >> $wxsFilePath
          '                        <RegistryValue ' >> $wxsFilePath
          '                            Root="HKCU" ' >> $wxsFilePath
          '                            Key="Software\Tuurlijk\ApiSnip" ' >> $wxsFilePath
          '                            Name="installed" ' >> $wxsFilePath
          '                            Type="integer" ' >> $wxsFilePath
          '                            Value="1" ' >> $wxsFilePath
          '                            KeyPath="yes" />' >> $wxsFilePath
          '                    </Component>' >> $wxsFilePath
          '                </Directory>' >> $wxsFilePath
          '            </Directory>' >> $wxsFilePath
          '            ' >> $wxsFilePath
          '            <Directory Id="SystemFolder" Name="System">' >> $wxsFilePath
          '                <Component Id="UpdatePath" Guid="*">' >> $wxsFilePath
          '                    <Environment ' >> $wxsFilePath
          '                        Id="PATH" ' >> $wxsFilePath
          '                        Name="PATH" ' >> $wxsFilePath
          '                        Value="[INSTALLDIR]" ' >> $wxsFilePath
          '                        Permanent="no" ' >> $wxsFilePath
          '                        Part="last" ' >> $wxsFilePath
          '                        Action="set" ' >> $wxsFilePath
          '                        System="yes" />' >> $wxsFilePath
          '                    <RegistryValue ' >> $wxsFilePath
          '                        Root="HKCU" ' >> $wxsFilePath
          '                        Key="Software\Tuurlijk\ApiSnip" ' >> $wxsFilePath
          '                        Name="path_updated" ' >> $wxsFilePath
          '                        Type="integer" ' >> $wxsFilePath
          '                        Value="1" ' >> $wxsFilePath
          '                        KeyPath="yes" />' >> $wxsFilePath
          '                </Component>' >> $wxsFilePath
          '            </Directory>' >> $wxsFilePath
          '        </Directory>' >> $wxsFilePath
          '        ' >> $wxsFilePath
          '        <Feature Id="Complete" Level="1">' >> $wxsFilePath
          '            <ComponentRef Id="MainExecutable" />' >> $wxsFilePath
          '            <ComponentRef Id="ApplicationShortcut" />' >> $wxsFilePath
          '            <ComponentRef Id="UpdatePath" />' >> $wxsFilePath
          '        </Feature>' >> $wxsFilePath
          '        ' >> $wxsFilePath
          '        <UI>' >> $wxsFilePath
          '            <UIRef Id="WixUI_Minimal" />' >> $wxsFilePath
          '        </UI>' >> $wxsFilePath
          '    </Product>' >> $wxsFilePath
          '</Wix>' >> $wxsFilePath
        }
        
        # Build with cargo-wix
        cargo wix --target ${{ inputs.target }} --output "artifacts/apisnip-$version-${{ inputs.platform }}.msi" --no-build --platform $wixPlatform
        
        # Also create a zip file
        Compress-Archive -Path "target\${{ inputs.target }}\release\apisnip.exe" -DestinationPath "artifacts\apisnip-$version-${{ inputs.platform }}.zip" -Force 